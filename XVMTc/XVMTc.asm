// BOOT CODE
@256
D=A
@SP
M=D
@Sys.init0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=A
@0
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Sys.init0)
// function Test.test 2      
(Test.test)
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
// push constant 8      
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop static 42      
@Test.42
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 1      
@1
D=A
@LCL
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 0      
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0      
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// l-not        
@SP
AM=M-1
D=M
@SP
A=M
M=-1
@END_LNOT0
D;JEQ
@SP
A=M
M=0
(END_LNOT0)
@SP
M=M+1
// pop this 1      
@1
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// l-and        
@SP
AM=M-1
D=M
@R13
M=D
@SP
AM=M-1
D=M
@R14
M=D
@SP
A=M
M=0
@R13
D=M
@END_LAND0
D;JEQ
@R14
D=M
@END_LAND0
D;JEQ
@SP
A=M
M=-1
(END_LAND0)
@SP
M=M+1
// pop this 2      
@2
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// l-or        
@SP
AM=M-1
D=M
@R13
M=D
@SP
AM=M-1
D=M
@R14
M=D
@SP
A=M
M=-1
@R13
D=M
@END_LOR0
D;JNE
@R14
D=M
@END_LOR0
D;JNE
@SP
A=M
M=0
(END_LOR0)
@SP
M=M+1
// pop this 3      
@3
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// l-xor        
@SP
AM=M-1
D=M
@L_XOR_FRSTTRUE_0
D;JNE
@SP
AM=M-1
D=M
@L_XOR_FRSTFALSE_SCNDTRUE_0
D;JNE
@SP
A=M
M=0
@L_XOR_CONT_0
0;JMP
(L_XOR_FRSTTRUE_0)
@SP
AM=M-1
D=M
@L_XOR_SECONDTRUE_0
D;JNE
@SP
A=M
M=-1
@L_XOR_CONT_0
0;JMP
(L_XOR_SECONDTRUE_0)
@SP
A=M
M=0
@L_XOR_CONT_0
0;JMP
(L_XOR_FRSTFALSE_SCNDTRUE_0)
@SP
A=M
M=-1
(L_XOR_CONT_0)
@SP
M=M+1
// pop this 4      
@4
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// l-not        
@SP
AM=M-1
D=M
@SP
A=M
M=-1
@END_LNOT1
D;JEQ
@SP
A=M
M=0
(END_LNOT1)
@SP
M=M+1
// pop this 5      
@5
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// l-and        
@SP
AM=M-1
D=M
@R13
M=D
@SP
AM=M-1
D=M
@R14
M=D
@SP
A=M
M=0
@R13
D=M
@END_LAND1
D;JEQ
@R14
D=M
@END_LAND1
D;JEQ
@SP
A=M
M=-1
(END_LAND1)
@SP
M=M+1
// pop this 6      
@6
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// l-or        
@SP
AM=M-1
D=M
@R13
M=D
@SP
AM=M-1
D=M
@R14
M=D
@SP
A=M
M=-1
@R13
D=M
@END_LOR1
D;JNE
@R14
D=M
@END_LOR1
D;JNE
@SP
A=M
M=0
(END_LOR1)
@SP
M=M+1
// pop this 7      
@7
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// l-xor        
@SP
AM=M-1
D=M
@L_XOR_FRSTTRUE_1
D;JNE
@SP
AM=M-1
D=M
@L_XOR_FRSTFALSE_SCNDTRUE_1
D;JNE
@SP
A=M
M=0
@L_XOR_CONT_1
0;JMP
(L_XOR_FRSTTRUE_1)
@SP
AM=M-1
D=M
@L_XOR_SECONDTRUE_1
D;JNE
@SP
A=M
M=-1
@L_XOR_CONT_1
0;JMP
(L_XOR_SECONDTRUE_1)
@SP
A=M
M=0
@L_XOR_CONT_1
0;JMP
(L_XOR_FRSTFALSE_SCNDTRUE_1)
@SP
A=M
M=-1
(L_XOR_CONT_1)
@SP
M=M+1
// pop this 8      
@8
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Sys.output 0      
@Sys.output.return.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.output
0;JMP
(Sys.output.return.0)
// pop local 0      
@0
D=A
@LCL
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push static 42      
@Test.42
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 1      
@1
D=A
@LCL
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add        
@SP
AM=M-1
D=M
@SP
AM=M-1
M=D+M
@SP
M=M+1
// pop local 1      
@1
D=A
@LCL
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// l-not        
@SP
AM=M-1
D=M
@SP
A=M
M=-1
@END_LNOT2
D;JEQ
@SP
A=M
M=0
(END_LNOT2)
@SP
M=M+1
// pop this 1      
@1
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not        
@SP
AM=M-1
M=!M
@SP
M=M+1
// l-and        
@SP
AM=M-1
D=M
@R13
M=D
@SP
AM=M-1
D=M
@R14
M=D
@SP
A=M
M=0
@R13
D=M
@END_LAND2
D;JEQ
@R14
D=M
@END_LAND2
D;JEQ
@SP
A=M
M=-1
(END_LAND2)
@SP
M=M+1
// pop this 2      
@2
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not        
@SP
AM=M-1
M=!M
@SP
M=M+1
// l-or        
@SP
AM=M-1
D=M
@R13
M=D
@SP
AM=M-1
D=M
@R14
M=D
@SP
A=M
M=-1
@R13
D=M
@END_LOR2
D;JNE
@R14
D=M
@END_LOR2
D;JNE
@SP
A=M
M=0
(END_LOR2)
@SP
M=M+1
// pop this 3      
@3
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not        
@SP
AM=M-1
M=!M
@SP
M=M+1
// l-xor        
@SP
AM=M-1
D=M
@L_XOR_FRSTTRUE_2
D;JNE
@SP
AM=M-1
D=M
@L_XOR_FRSTFALSE_SCNDTRUE_2
D;JNE
@SP
A=M
M=0
@L_XOR_CONT_2
0;JMP
(L_XOR_FRSTTRUE_2)
@SP
AM=M-1
D=M
@L_XOR_SECONDTRUE_2
D;JNE
@SP
A=M
M=-1
@L_XOR_CONT_2
0;JMP
(L_XOR_SECONDTRUE_2)
@SP
A=M
M=0
@L_XOR_CONT_2
0;JMP
(L_XOR_FRSTFALSE_SCNDTRUE_2)
@SP
A=M
M=-1
(L_XOR_CONT_2)
@SP
M=M+1
// pop this 4      
@4
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// l-not        
@SP
AM=M-1
D=M
@SP
A=M
M=-1
@END_LNOT3
D;JEQ
@SP
A=M
M=0
(END_LNOT3)
@SP
M=M+1
// pop this 5      
@5
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 42      
@42
D=A
@SP
A=M
M=D
@SP
M=M+1
// not        
@SP
AM=M-1
M=!M
@SP
M=M+1
// l-and        
@SP
AM=M-1
D=M
@R13
M=D
@SP
AM=M-1
D=M
@R14
M=D
@SP
A=M
M=0
@R13
D=M
@END_LAND3
D;JEQ
@R14
D=M
@END_LAND3
D;JEQ
@SP
A=M
M=-1
(END_LAND3)
@SP
M=M+1
// pop this 6      
@6
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 42      
@42
D=A
@SP
A=M
M=D
@SP
M=M+1
// not        
@SP
AM=M-1
M=!M
@SP
M=M+1
// l-or        
@SP
AM=M-1
D=M
@R13
M=D
@SP
AM=M-1
D=M
@R14
M=D
@SP
A=M
M=-1
@R13
D=M
@END_LOR3
D;JNE
@R14
D=M
@END_LOR3
D;JNE
@SP
A=M
M=0
(END_LOR3)
@SP
M=M+1
// pop this 7      
@7
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 42      
@42
D=A
@SP
A=M
M=D
@SP
M=M+1
// not        
@SP
AM=M-1
M=!M
@SP
M=M+1
// l-xor        
@SP
AM=M-1
D=M
@L_XOR_FRSTTRUE_3
D;JNE
@SP
AM=M-1
D=M
@L_XOR_FRSTFALSE_SCNDTRUE_3
D;JNE
@SP
A=M
M=0
@L_XOR_CONT_3
0;JMP
(L_XOR_FRSTTRUE_3)
@SP
AM=M-1
D=M
@L_XOR_SECONDTRUE_3
D;JNE
@SP
A=M
M=-1
@L_XOR_CONT_3
0;JMP
(L_XOR_SECONDTRUE_3)
@SP
A=M
M=0
@L_XOR_CONT_3
0;JMP
(L_XOR_FRSTFALSE_SCNDTRUE_3)
@SP
A=M
M=-1
(L_XOR_CONT_3)
@SP
M=M+1
// pop this 8      
@8
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Sys.output 0      
@Sys.output.return.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.output
0;JMP
(Sys.output.return.1)
// pop local 0      
@0
D=A
@LCL
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push static 42      
@Test.42
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 1      
@1
D=A
@LCL
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add        
@SP
AM=M-1
D=M
@SP
AM=M-1
M=D+M
@SP
M=M+1
// pop local 1      
@1
D=A
@LCL
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not        
@SP
AM=M-1
M=!M
@SP
M=M+1
// l-not        
@SP
AM=M-1
D=M
@SP
A=M
M=-1
@END_LNOT4
D;JEQ
@SP
A=M
M=0
(END_LNOT4)
@SP
M=M+1
// pop this 1      
@1
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not        
@SP
AM=M-1
M=!M
@SP
M=M+1
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// l-and        
@SP
AM=M-1
D=M
@R13
M=D
@SP
AM=M-1
D=M
@R14
M=D
@SP
A=M
M=0
@R13
D=M
@END_LAND4
D;JEQ
@R14
D=M
@END_LAND4
D;JEQ
@SP
A=M
M=-1
(END_LAND4)
@SP
M=M+1
// pop this 2      
@2
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not        
@SP
AM=M-1
M=!M
@SP
M=M+1
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// l-or        
@SP
AM=M-1
D=M
@R13
M=D
@SP
AM=M-1
D=M
@R14
M=D
@SP
A=M
M=-1
@R13
D=M
@END_LOR4
D;JNE
@R14
D=M
@END_LOR4
D;JNE
@SP
A=M
M=0
(END_LOR4)
@SP
M=M+1
// pop this 3      
@3
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not        
@SP
AM=M-1
M=!M
@SP
M=M+1
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// l-xor        
@SP
AM=M-1
D=M
@L_XOR_FRSTTRUE_4
D;JNE
@SP
AM=M-1
D=M
@L_XOR_FRSTFALSE_SCNDTRUE_4
D;JNE
@SP
A=M
M=0
@L_XOR_CONT_4
0;JMP
(L_XOR_FRSTTRUE_4)
@SP
AM=M-1
D=M
@L_XOR_SECONDTRUE_4
D;JNE
@SP
A=M
M=-1
@L_XOR_CONT_4
0;JMP
(L_XOR_SECONDTRUE_4)
@SP
A=M
M=0
@L_XOR_CONT_4
0;JMP
(L_XOR_FRSTFALSE_SCNDTRUE_4)
@SP
A=M
M=-1
(L_XOR_CONT_4)
@SP
M=M+1
// pop this 4      
@4
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 42      
@42
D=A
@SP
A=M
M=D
@SP
M=M+1
// l-not        
@SP
AM=M-1
D=M
@SP
A=M
M=-1
@END_LNOT5
D;JEQ
@SP
A=M
M=0
(END_LNOT5)
@SP
M=M+1
// pop this 5      
@5
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 42      
@42
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// l-and        
@SP
AM=M-1
D=M
@R13
M=D
@SP
AM=M-1
D=M
@R14
M=D
@SP
A=M
M=0
@R13
D=M
@END_LAND5
D;JEQ
@R14
D=M
@END_LAND5
D;JEQ
@SP
A=M
M=-1
(END_LAND5)
@SP
M=M+1
// pop this 6      
@6
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 42      
@42
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// l-or        
@SP
AM=M-1
D=M
@R13
M=D
@SP
AM=M-1
D=M
@R14
M=D
@SP
A=M
M=-1
@R13
D=M
@END_LOR5
D;JNE
@R14
D=M
@END_LOR5
D;JNE
@SP
A=M
M=0
(END_LOR5)
@SP
M=M+1
// pop this 7      
@7
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 42      
@42
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// l-xor        
@SP
AM=M-1
D=M
@L_XOR_FRSTTRUE_5
D;JNE
@SP
AM=M-1
D=M
@L_XOR_FRSTFALSE_SCNDTRUE_5
D;JNE
@SP
A=M
M=0
@L_XOR_CONT_5
0;JMP
(L_XOR_FRSTTRUE_5)
@SP
AM=M-1
D=M
@L_XOR_SECONDTRUE_5
D;JNE
@SP
A=M
M=-1
@L_XOR_CONT_5
0;JMP
(L_XOR_SECONDTRUE_5)
@SP
A=M
M=0
@L_XOR_CONT_5
0;JMP
(L_XOR_FRSTFALSE_SCNDTRUE_5)
@SP
A=M
M=-1
(L_XOR_CONT_5)
@SP
M=M+1
// pop this 8      
@8
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Sys.output 0      
@Sys.output.return.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.output
0;JMP
(Sys.output.return.2)
// pop local 0      
@0
D=A
@LCL
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push static 42      
@Test.42
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 1      
@1
D=A
@LCL
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add        
@SP
AM=M-1
D=M
@SP
AM=M-1
M=D+M
@SP
M=M+1
// pop local 1      
@1
D=A
@LCL
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not        
@SP
AM=M-1
M=!M
@SP
M=M+1
// l-not        
@SP
AM=M-1
D=M
@SP
A=M
M=-1
@END_LNOT6
D;JEQ
@SP
A=M
M=0
(END_LNOT6)
@SP
M=M+1
// pop this 1      
@1
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not        
@SP
AM=M-1
M=!M
@SP
M=M+1
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not        
@SP
AM=M-1
M=!M
@SP
M=M+1
// l-and        
@SP
AM=M-1
D=M
@R13
M=D
@SP
AM=M-1
D=M
@R14
M=D
@SP
A=M
M=0
@R13
D=M
@END_LAND6
D;JEQ
@R14
D=M
@END_LAND6
D;JEQ
@SP
A=M
M=-1
(END_LAND6)
@SP
M=M+1
// pop this 2      
@2
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not        
@SP
AM=M-1
M=!M
@SP
M=M+1
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not        
@SP
AM=M-1
M=!M
@SP
M=M+1
// l-or        
@SP
AM=M-1
D=M
@R13
M=D
@SP
AM=M-1
D=M
@R14
M=D
@SP
A=M
M=-1
@R13
D=M
@END_LOR6
D;JNE
@R14
D=M
@END_LOR6
D;JNE
@SP
A=M
M=0
(END_LOR6)
@SP
M=M+1
// pop this 3      
@3
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not        
@SP
AM=M-1
M=!M
@SP
M=M+1
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not        
@SP
AM=M-1
M=!M
@SP
M=M+1
// l-xor        
@SP
AM=M-1
D=M
@L_XOR_FRSTTRUE_6
D;JNE
@SP
AM=M-1
D=M
@L_XOR_FRSTFALSE_SCNDTRUE_6
D;JNE
@SP
A=M
M=0
@L_XOR_CONT_6
0;JMP
(L_XOR_FRSTTRUE_6)
@SP
AM=M-1
D=M
@L_XOR_SECONDTRUE_6
D;JNE
@SP
A=M
M=-1
@L_XOR_CONT_6
0;JMP
(L_XOR_SECONDTRUE_6)
@SP
A=M
M=0
@L_XOR_CONT_6
0;JMP
(L_XOR_FRSTFALSE_SCNDTRUE_6)
@SP
A=M
M=-1
(L_XOR_CONT_6)
@SP
M=M+1
// pop this 4      
@4
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 42      
@42
D=A
@SP
A=M
M=D
@SP
M=M+1
// not        
@SP
AM=M-1
M=!M
@SP
M=M+1
// l-not        
@SP
AM=M-1
D=M
@SP
A=M
M=-1
@END_LNOT7
D;JEQ
@SP
A=M
M=0
(END_LNOT7)
@SP
M=M+1
// pop this 5      
@5
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 42      
@42
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 42      
@42
D=A
@SP
A=M
M=D
@SP
M=M+1
// not        
@SP
AM=M-1
M=!M
@SP
M=M+1
// l-and        
@SP
AM=M-1
D=M
@R13
M=D
@SP
AM=M-1
D=M
@R14
M=D
@SP
A=M
M=0
@R13
D=M
@END_LAND7
D;JEQ
@R14
D=M
@END_LAND7
D;JEQ
@SP
A=M
M=-1
(END_LAND7)
@SP
M=M+1
// pop this 6      
@6
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 42      
@42
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 42      
@42
D=A
@SP
A=M
M=D
@SP
M=M+1
// not        
@SP
AM=M-1
M=!M
@SP
M=M+1
// l-or        
@SP
AM=M-1
D=M
@R13
M=D
@SP
AM=M-1
D=M
@R14
M=D
@SP
A=M
M=-1
@R13
D=M
@END_LOR7
D;JNE
@R14
D=M
@END_LOR7
D;JNE
@SP
A=M
M=0
(END_LOR7)
@SP
M=M+1
// pop this 7      
@7
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 42      
@42
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 42      
@42
D=A
@SP
A=M
M=D
@SP
M=M+1
// not        
@SP
AM=M-1
M=!M
@SP
M=M+1
// l-xor        
@SP
AM=M-1
D=M
@L_XOR_FRSTTRUE_7
D;JNE
@SP
AM=M-1
D=M
@L_XOR_FRSTFALSE_SCNDTRUE_7
D;JNE
@SP
A=M
M=0
@L_XOR_CONT_7
0;JMP
(L_XOR_FRSTTRUE_7)
@SP
AM=M-1
D=M
@L_XOR_SECONDTRUE_7
D;JNE
@SP
A=M
M=-1
@L_XOR_CONT_7
0;JMP
(L_XOR_SECONDTRUE_7)
@SP
A=M
M=0
@L_XOR_CONT_7
0;JMP
(L_XOR_FRSTFALSE_SCNDTRUE_7)
@SP
A=M
M=-1
(L_XOR_CONT_7)
@SP
M=M+1
// pop this 8      
@8
D=A
@THIS
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Sys.output 0      
@Sys.output.return.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.output
0;JMP
(Sys.output.return.3)
// pop local 0      
@0
D=A
@LCL
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push static 42      
@Test.42
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 1      
@1
D=A
@LCL
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// add        
@SP
AM=M-1
D=M
@SP
AM=M-1
M=D+M
@SP
M=M+1
// pop local 1      
@1
D=A
@LCL
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 1      
@1
D=A
@LCL
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// return        
@LCL
D=M
@R13
M=D
@R13
D=M
@5
AD=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
D=M
@1
AD=D-A
D=M
@THAT
M=D
@R13
D=M
@2
AD=D-A
D=M
@THIS
M=D
@R13
D=M
@3
AD=D-A
D=M
@ARG
M=D
@R13
D=M
@4
AD=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// BOOT CODE
@256
D=A
@SP
M=D
@Sys.init0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=A
@0
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Sys.init0)
// function Sys.init 0      
(Sys.init)
// push constant 3000      
@3000
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop static 42      
@Sys.42
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push static 42      
@Sys.42
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1      
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub        
@SP
AM=M-1
D=M
@SP
AM=M-1
M=M-D
@SP
M=M+1
// pop pointer 1      
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0      
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop that 0      
@0
D=A
@THAT
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push that 0      
@0
D=A
@THAT
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 1      
@1
D=A
@THAT
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Sys.output 0      
@Sys.output.return.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.output
0;JMP
(Sys.output.return.4)
// pop temp 0      
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push static 42      
@Sys.42
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Test.test 1      
@Test.test.return.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Test.test
0;JMP
(Test.test.return.5)
// pop that 2      
@2
D=A
@THAT
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Sys.output 0      
@Sys.output.return.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.output
0;JMP
(Sys.output.return.6)
// pop temp 0      
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label TRAP       
(Sys.TRAP)
// goto TRAP       
@Sys.TRAP
0;JMP
// push temp 0      
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// return        
@LCL
D=M
@R13
M=D
@R13
D=M
@5
AD=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
D=M
@1
AD=D-A
D=M
@THAT
M=D
@R13
D=M
@2
AD=D-A
D=M
@THIS
M=D
@R13
D=M
@3
AD=D-A
D=M
@ARG
M=D
@R13
D=M
@4
AD=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Sys.output 0      
(Sys.output)
// push static 42      
@Sys.42
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1      
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub        
@SP
AM=M-1
D=M
@SP
AM=M-1
M=M-D
@SP
M=M+1
// pop pointer 1      
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push that 0      
@0
D=A
@THAT
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1      
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add        
@SP
AM=M-1
D=M
@SP
AM=M-1
M=D+M
@SP
M=M+1
// pop that 0      
@0
D=A
@THAT
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push that 1      
@1
D=A
@THAT
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1      
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add        
@SP
AM=M-1
D=M
@SP
AM=M-1
M=D+M
@SP
M=M+1
// pop that 1      
@1
D=A
@THAT
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push that 0      
@0
D=A
@THAT
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// return        
@LCL
D=M
@R13
M=D
@R13
D=M
@5
AD=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
D=M
@1
AD=D-A
D=M
@THAT
M=D
@R13
D=M
@2
AD=D-A
D=M
@THIS
M=D
@R13
D=M
@3
AD=D-A
D=M
@ARG
M=D
@R13
D=M
@4
AD=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
